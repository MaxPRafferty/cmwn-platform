<?php

namespace IntegrationTest;

use Security\Authentication\AuthenticationService;
use Security\Service\SecurityService;
use User\UserInterface;

/**
 * Integration Test Case
 *
 * This will log all dispatches that are authenticated then at the end
 * check if those calls fail when not authenticated
 *
 * @group Api
 * @group Db
 */
abstract class IntegrationTest extends AbstractApigilityTestCase
{
    /**
     * @var bool - used by overwritten dispatch to check that it was not called directly
     */
    private $wrapperCalled;

    /**
     * Local static cache of users that have logged in during testing with their data
     *
     * @var array
     */
    private static $userCache = [];

    /**
     * @before
     */
    public function initializeTest()
    {
        $this->wrapperCalled = false;
    }

    /**
     * Dispatches Authenticated calls to the API and perform standard checks
     *
     * @param string $login
     * @param string $route
     * @param int $code
     * @param string $method
     * @param array $params
     *
     * @return UserInterface The logged in user
     */
    protected function dispatchAuthenticatedCall(
        string $login,
        string $route,
        int $code = 200,
        $method = 'GET',
        array $params = []
    ) {
        $this->injectValidCsrfToken();
        $user = $this->logInUser($login);
        $this->dispatchCall($route, $code, $method, $params);
        // TODO Log the request and check that this request fails with an invalid CSRF
        // TODO log the request and check reset password
        return $user;
    }

    /**
     * Dispatches calls to the API and perform standard checks
     *
     * @param string $route
     * @param int $code
     * @param string $method
     * @param array $params
     */
    protected function dispatchCall(
        string $route,
        int $code = 200,
        $method = 'GET',
        array $params = []
    ) {
        $this->wrapperCalled = true;
        $this->dispatch($route, $method, $params);

        $this->assertResponseStatusCode($code);
        $this->assertControllerName($this->getControllerNameForTest());
        $this->assertMatchedRouteName($this->getControllerRouteNameForTest());
    }

    /**
     * @inheritDoc
     */
    public function dispatch($url, $method = null, $params = [], $isXmlHttpRequest = false)
    {
        if (!$this->wrapperCalled) {
            $this->fail('You Cannot call dispatch directly');
        }

        parent::dispatch($url, $method, $params, $isXmlHttpRequest); // TODO: Change the autogenerated stub
    }

    /**
     * Logs in a user (from the test DB)
     *
     * @param string $userName
     *
     * @return UserInterface
     */
    public function logInUser($userName)
    {
        if (!isset(self::$userCache[$userName])) {
            /** @var SecurityService $userService */
            $userService                  = TestHelper::getServiceManager()->get(SecurityService::class);
            self::$userCache[$userName] = $userService->fetchUserByUserName($userName);
        }

        $this->getAuthService()->getStorage()->write(self::$userCache[$userName]);

        return self::$userCache[$userName];
    }

    /**
     * Logs in a user that needs to change their password
     *
     * @param $userName
     */
    public function logInChangePasswordUser($userName)
    {
        $user = new ChangePasswordUser($this->logInUser($userName)->getArrayCopy());
        $this->getAuthService()->getStorage()->write($user);
    }

    /**
     * @return AuthenticationService
     */
    protected function getAuthService()
    {
        return TestHelper::getServiceManager()->get(AuthenticationService::class);
    }

    /**
     * @after
     */
    public function logOutUser()
    {
        $this->getAuthService()->clearIdentity();
    }

    /**
     * Return the name of the expected controller that should have been dispatched
     *
     * @return string
     */
    abstract protected function getControllerNameForTest(): string;

    /**
     * Return the name of the expected matched route
     *
     * @return string
     */
    abstract protected function getControllerRouteNameForTest(): string;
}
